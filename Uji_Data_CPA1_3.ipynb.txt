{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "Library yang Diperlukan dalam Algoritma Klasifikasi"
      ],
      "metadata": {
        "id": "FgGiwYFEPgVv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split, cross_val_predict, KFold\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.metrics import classification_report, roc_curve, auc\n",
        "import matplotlib.pyplot as plt"
      ],
      "metadata": {
        "id": "iytR5Q39GTkV"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Mengiput Beberapa Data Excel sesuai Kategori"
      ],
      "metadata": {
        "id": "RJ-5RiwsRp30"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "file_paths = ['/content/drive/My Drive/CPA1.xlsx',\n",
        "              '/content/drive/My Drive/CPA2.xlsx',\n",
        "              '/content/drive/My Drive/CPA3.xlsx']\n",
        "datas = []\n",
        "for file_path in file_paths:\n",
        "    df = pd.read_excel(file_path)\n",
        "    datas.append(df)\n",
        "data = pd.concat(datas, ignore_index=True)"
      ],
      "metadata": {
        "id": "UKk8ujt3GgAx"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Membagi Data Bebas (X) dan Data Terikat (Y)"
      ],
      "metadata": {
        "id": "LPQh8G64R4m3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "X = data.iloc[1:, :-1].values\n",
        "y = data.iloc[1:, -1].values"
      ],
      "metadata": {
        "id": "gTH2FH-oHXXq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Pengerjaan Algoritma SVM dan K-NN dengan metode Klasifikasi 10-fold CV"
      ],
      "metadata": {
        "id": "Lsp97bvdSROo"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "iPvkHzX0GNth"
      },
      "outputs": [],
      "source": [
        "def svm_knn_cross_validation(X, y):\n",
        "    # Algoritma SVM\n",
        "    svm_model = SVC(kernel='linear')\n",
        "    svm_predictions = cross_val_predict(svm_model, X, y, cv=10)\n",
        "    svm_report = classification_report(y, svm_predictions, target_names=np.unique(y), zero_division=1)\n",
        "    print(\"SVM Classification Report (10-fold CV):\\n\", svm_report)\n",
        "    # Algoritma K-NN\n",
        "    knn_model = KNeighborsClassifier(n_neighbors=5)\n",
        "    knn_predictions = cross_val_predict(knn_model, X, y, cv=10)\n",
        "    knn_report = classification_report(y, knn_predictions, target_names=np.unique(y), zero_division=1)\n",
        "    print(\"K-NN Classification Report (10-fold CV):\\n\", knn_report)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Output metode Klasikasi 10-fold CV"
      ],
      "metadata": {
        "id": "AjAZiSnZS3s4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "svm_knn_cross_validation(X, y)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4FoSvOr5S4LJ",
        "outputId": "022baa45-983c-4e80-9f80-d1764d9aaf8c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "SVM Classification Report (10-fold CV):\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           A       0.67      0.07      0.12       299\n",
            "           B       1.00      0.00      0.00       100\n",
            "           E       0.44      0.99      0.61       300\n",
            "\n",
            "    accuracy                           0.45       699\n",
            "   macro avg       0.70      0.35      0.24       699\n",
            "weighted avg       0.62      0.45      0.31       699\n",
            "\n",
            "K-NN Classification Report (10-fold CV):\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           A       0.59      0.67      0.62       299\n",
            "           B       0.08      0.05      0.06       100\n",
            "           E       0.74      0.73      0.74       300\n",
            "\n",
            "    accuracy                           0.61       699\n",
            "   macro avg       0.47      0.48      0.47       699\n",
            "weighted avg       0.58      0.61      0.59       699\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Pengerjaan Algoritma SVM dan K-NN dengan metode Klasifikasi 75% training, 25% testing"
      ],
      "metadata": {
        "id": "v8jhkdkPSiov"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def svm_knn_split(X, y):\n",
        "    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)\n",
        "    # SVM\n",
        "    svm_model = SVC(kernel='linear')\n",
        "    svm_model.fit(X_train, y_train)\n",
        "    svm_predictions = svm_model.predict(X_test)\n",
        "    svm_report = classification_report(y_test, svm_predictions, target_names=np.unique(y), zero_division=1)\n",
        "    print(\"SVM Classification Report (75% Training, 25% Testing):\\n\", svm_report)\n",
        "    # K-NN\n",
        "    knn_model = KNeighborsClassifier(n_neighbors=5)\n",
        "    knn_model.fit(X_train, y_train)\n",
        "    knn_predictions = knn_model.predict(X_test)\n",
        "    knn_report = classification_report(y_test, knn_predictions, target_names=np.unique(y), zero_division=1)\n",
        "    print(\"K-NN Classification Report (75% Training, 25% Testing):\\n\", knn_report)"
      ],
      "metadata": {
        "id": "uc7_l0HVSi3v"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Output metode Klasifikasi 75% training, 25% testing"
      ],
      "metadata": {
        "id": "pkATgTt7SjDX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "svm_knn_split(X, y)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hPKpCibGTZ6w",
        "outputId": "d64b7ef8-9af8-43b3-fc07-e531de6dfea3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "SVM Classification Report (75% Training, 25% Testing):\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           A       0.38      1.00      0.55        67\n",
            "           B       1.00      0.00      0.00        30\n",
            "           E       1.00      0.00      0.00        78\n",
            "\n",
            "    accuracy                           0.38       175\n",
            "   macro avg       0.79      0.33      0.18       175\n",
            "weighted avg       0.76      0.38      0.21       175\n",
            "\n",
            "K-NN Classification Report (75% Training, 25% Testing):\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           A       0.56      0.75      0.64        67\n",
            "           B       0.06      0.03      0.04        30\n",
            "           E       0.88      0.78      0.83        78\n",
            "\n",
            "    accuracy                           0.64       175\n",
            "   macro avg       0.50      0.52      0.50       175\n",
            "weighted avg       0.62      0.64      0.62       175\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Pengerjaan Algoritma SVM dan K-NN dengan metode Klasifikasi 50% training, 25% validation, dan 25% testing"
      ],
      "metadata": {
        "id": "xo-FLLCjTaGH"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def svm_knn_split_validation(X, y):\n",
        "    X_train_val, X_test, y_train_val, y_test = train_test_split(X, y, test_size=0.25, random_state=42)\n",
        "    X_train, X_val, y_train, y_val = train_test_split(X_train_val, y_train_val, test_size=0.33, random_state=42)\n",
        "    # SVM\n",
        "    svm_model = SVC(kernel='linear')\n",
        "    svm_model.fit(X_train, y_train)\n",
        "    svm_predictions = svm_model.predict(X_test)\n",
        "    svm_report = classification_report(y_test, svm_predictions, target_names=np.unique(y), zero_division=1)\n",
        "    print(\"SVM Classification Report (50% Training, 25% Validation, 25% Testing):\\n\", svm_report)\n",
        "    # K-NN\n",
        "    knn_model = KNeighborsClassifier(n_neighbors=5)\n",
        "    knn_model.fit(X_train, y_train)\n",
        "    knn_predictions = knn_model.predict(X_test)\n",
        "    knn_report = classification_report(y_test, knn_predictions, target_names=np.unique(y), zero_division=1)\n",
        "    print(\"K-NN Classification Report (50% Training, 25% Validation, 25% Testing):\\n\", knn_report)"
      ],
      "metadata": {
        "id": "Hdjt9kkRSjOZ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Output metode Klasifikasi 50% training, 25% validation, dan 25% testing"
      ],
      "metadata": {
        "id": "mFME12lCTqjZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "svm_knn_split_validation(X, y)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZhItOCZATqtg",
        "outputId": "b6e7df72-bc51-4615-8a99-e0523089826b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "SVM Classification Report (50% Training, 25% Validation, 25% Testing):\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           A       0.38      1.00      0.55        67\n",
            "           B       1.00      0.00      0.00        30\n",
            "           E       1.00      0.00      0.00        78\n",
            "\n",
            "    accuracy                           0.38       175\n",
            "   macro avg       0.79      0.33      0.18       175\n",
            "weighted avg       0.76      0.38      0.21       175\n",
            "\n",
            "K-NN Classification Report (50% Training, 25% Validation, 25% Testing):\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           A       0.57      0.82      0.67        67\n",
            "           B       0.35      0.20      0.26        30\n",
            "           E       0.89      0.69      0.78        78\n",
            "\n",
            "    accuracy                           0.66       175\n",
            "   macro avg       0.60      0.57      0.57       175\n",
            "weighted avg       0.67      0.66      0.65       175\n",
            "\n"
          ]
        }
      ]
    }
  ]
}